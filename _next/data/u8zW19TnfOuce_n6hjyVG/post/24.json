{"pageProps":{"post":{"url":"https://api.github.com/repos/minecode/minecode.github.io/issues/24","repository_url":"https://api.github.com/repos/minecode/minecode.github.io","labels_url":"https://api.github.com/repos/minecode/minecode.github.io/issues/24/labels{/name}","comments_url":"https://api.github.com/repos/minecode/minecode.github.io/issues/24/comments","events_url":"https://api.github.com/repos/minecode/minecode.github.io/issues/24/events","html_url":"https://github.com/minecode/minecode.github.io/issues/24","id":603586342,"node_id":"MDU6SXNzdWU2MDM1ODYzNDI=","number":24,"title":"[POST] Transforme os seus Raspberry Pi num \"cluster\" de forma rápida e indolor","user":{"login":"tiagoslucas","id":25772694,"node_id":"MDQ6VXNlcjI1NzcyNjk0","avatar_url":"https://avatars.githubusercontent.com/u/25772694?v=4","gravatar_id":"","url":"https://api.github.com/users/tiagoslucas","html_url":"https://github.com/tiagoslucas","followers_url":"https://api.github.com/users/tiagoslucas/followers","following_url":"https://api.github.com/users/tiagoslucas/following{/other_user}","gists_url":"https://api.github.com/users/tiagoslucas/gists{/gist_id}","starred_url":"https://api.github.com/users/tiagoslucas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tiagoslucas/subscriptions","organizations_url":"https://api.github.com/users/tiagoslucas/orgs","repos_url":"https://api.github.com/users/tiagoslucas/repos","events_url":"https://api.github.com/users/tiagoslucas/events{/privacy}","received_events_url":"https://api.github.com/users/tiagoslucas/received_events","type":"User","site_admin":false},"labels":[{"id":2002696420,"node_id":"MDU6TGFiZWwyMDAyNjk2NDIw","url":"https://api.github.com/repos/minecode/minecode.github.io/labels/Cluster","name":"Cluster","color":"d85d58","default":false,"description":""},{"id":2002695756,"node_id":"MDU6TGFiZWwyMDAyNjk1NzU2","url":"https://api.github.com/repos/minecode/minecode.github.io/labels/Raspberry%20Pi","name":"Raspberry Pi","color":"db6f87","default":false,"description":""},{"id":1923405712,"node_id":"MDU6TGFiZWwxOTIzNDA1NzEy","url":"https://api.github.com/repos/minecode/minecode.github.io/labels/post","name":"post","color":"2dc64e","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-04-20T22:56:01Z","updated_at":"2020-04-21T09:20:47Z","closed_at":"2020-04-20T23:22:45Z","author_association":"NONE","active_lock_reason":null,"body":"Com o desenvolvimento da tecnologia, cada vez menos temos interação com o que se passa dentro dos nossos computadores. Uma pessoa que frequente os _websites_ e fóruns de tecnologia, certamente já terá ouvido falar em “cluster”. Mas afinal, o que é um “cluster”? Nada como pôr as mãos na massa…\r\n\r\n![medium](https://miro.medium.com/max/1400/0*4jsx5ST4MjWkbRY9)\r\n\r\nPhoto by [Nadya Spetnitskaya](https://unsplash.com/@kiboka) on [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)\r\n\r\nVamos portanto criar um _cluster_ com Kubernetes.\r\n\r\nPara este projeto, vamos construir um _cluster_ usando 3 Raspberry Pi. Infelizmente, o suporte para Pi 1 foi descontinuado pelo Kubernetes, portanto todas as máquinas terão de ser posteriores à 1ª geração do _Single-Board Computer_. Recomendamos vivamente uma ligação à rede por cabo, apesar de ser opcional.\r\n\r\n1\\. Instalação\r\n==============\r\n\r\nO primeiro passo é formatar os cartões microSD. Vamos usar o _Raspbian Lite_, por ser um sistema operativo leve e supervisionado pela própria _Raspberry Pi Foundation_. Existe uma grande quantidade de ferramentas gratuitas que podem ser usadas para este processo. Usámos o _Win32 Disk Manager_:\r\n\r\n![medium](https://miro.medium.com/max/960/1*0f_ENEU6pvApJqtPeFejKg.png)\r\n\r\nAo iniciarmos o nosso Raspberry devemos mudar o _hostname,_ uma vez que _hostnames_ repetidos no mesmo _cluster_ tendem a gerar problemas. Pode ser feito usando a ferramenta de configuração:\r\n\r\n```\r\nsudo raspi-config\r\n```\r\n\r\nO Kubernetes funciona com o auxílio de contentores Docker, uma plataforma fácil de instalar:\r\n\r\n```\r\ncurl -sSL get.docker.com | sh && sudo usermod pi -aG docker  \r\nnewgrp docker\r\n```\r\n\r\nPara assegurar o bom funcionamento do _cluster_, nas versões mais recentes do Kubernetes, é necessário desativar o espaço de _swap_:\r\n\r\n```\r\nsudo dphys-swapfile swapoff && sudo dphys-swapfile uninstall && \\\\ sudo update-rc.d dphys-swapfile remove\r\n```\r\n\r\nTambém é necessário que o processo _cgroup_ inicie com o computador, que pode ser feito acrescentando comandos ao ficheiro de inicialização:\r\n\r\n```\r\nsudo nano /boot/cmdline.txt\r\n```\r\n\r\n**Sem adicionar nenhuma linha**, é necessário adicionar à linha existente:\r\n\r\n```\r\ncgroup\\_enable=cpuset cgroup\\_memory=1 cgroup\\_enable=memory\r\n```\r\n\r\n> Agora vamos reiniciar o Raspberry Pi.\r\n\r\nFinalmente, vamos instalar o Kubernetes e descarregar os ficheiros de configuração:\r\n\r\n```\r\ncurl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - && \\\\  \r\necho \"deb http://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list && \\\\  \r\nsudo apt-get update -q && sudo apt-get install -qy kubeadm  \r\nsudo kubeadm config images pull -v3\r\n```\r\n\r\n2\\. Configuração no “Master”\r\n============================\r\n\r\nDepois das ferramentas instaladas, vamos configurar o nosso nó _master_. Começando por iniciar um novo cluster Kubernetes:\r\n\r\n```\r\nsudo kubeadm init --token-ttl=0 --pod-network-cidr=10.244.0.0/16\r\n```\r\n\r\nEste comando pode demorar até 15 minutos para estar finalizado, dando tempo para se repetir o processo de instalação nos _workers_ do _cluster_. Os argumentos necessários para a configuração dos mesmos só serão apresentados no final desse tempo. Deve ter vagamente o seguinte aspecto:\r\n\r\n```\r\nkubeadm join --token 9e700f.7dc97f5e3a45c9e5 192.168.0.27:6443 --discovery-token-ca-cert-hash sha256:95cbb9ee5536aa61ec0239d6edd8598af68758308d0a0425848ae1af28859bea\r\n```\r\n\r\nComo indicado aos que prestam atenção, devemos correr o seguinte _snippet_:\r\n\r\n```\r\nmkdir -p $HOME/.kube  \r\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  \r\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\r\n```\r\n\r\nDe seguida, vamos configurar o _flannel_, a ferramenta de auxílio de rede que usamos neste caso:\r\n\r\n```\r\nkubectl apply -f [https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml](https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml)  \r\nsudo sysctl net.bridge.bridge-nf-call-iptables=1\r\n```\r\n\r\n3\\. Configuração nos Workers\r\n============================\r\n\r\nAssumindo que o _worker_ já está configurado e o comando de _join_ já foi dado pelo _kubeadm_ no _master_, devemos usar o mesmo em cada _worker_. De seguida, para utilizar o _flannel_, usamos o seguinte:\r\n\r\n```\r\nsudo sysctl net.bridge.bridge-nf-call-iptables=1\r\n```\r\n\r\nDevemos agora ter o nosso cluster a funcionar. Isso pode ser verificado dando o seguinte comando no _master_:\r\n\r\n```\r\nkubectl get nodes\r\n```\r\n\r\nSe todos os nós aparecerem na lista, o seu _cluster_ está montado.\r\n\r\nReferência: [https://blog.alexellis.io/serverless-kubernetes-on-raspberry-pi/](https://blog.alexellis.io/serverless-kubernetes-on-raspberry-pi/)\r\n","closed_by":{"login":"cfchenr","id":17366849,"node_id":"MDQ6VXNlcjE3MzY2ODQ5","avatar_url":"https://avatars.githubusercontent.com/u/17366849?v=4","gravatar_id":"","url":"https://api.github.com/users/cfchenr","html_url":"https://github.com/cfchenr","followers_url":"https://api.github.com/users/cfchenr/followers","following_url":"https://api.github.com/users/cfchenr/following{/other_user}","gists_url":"https://api.github.com/users/cfchenr/gists{/gist_id}","starred_url":"https://api.github.com/users/cfchenr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cfchenr/subscriptions","organizations_url":"https://api.github.com/users/cfchenr/orgs","repos_url":"https://api.github.com/users/cfchenr/repos","events_url":"https://api.github.com/users/cfchenr/events{/privacy}","received_events_url":"https://api.github.com/users/cfchenr/received_events","type":"User","site_admin":false},"performed_via_github_app":null},"relatedPosts":[]},"__N_SSG":true}