{"pageProps":{"post":{"url":"https://api.github.com/repos/minecode/minecode.github.io/issues/20","repository_url":"https://api.github.com/repos/minecode/minecode.github.io","labels_url":"https://api.github.com/repos/minecode/minecode.github.io/issues/20/labels{/name}","comments_url":"https://api.github.com/repos/minecode/minecode.github.io/issues/20/comments","events_url":"https://api.github.com/repos/minecode/minecode.github.io/issues/20/events","html_url":"https://github.com/minecode/minecode.github.io/issues/20","id":603572960,"node_id":"MDU6SXNzdWU2MDM1NzI5NjA=","number":20,"title":"[POST] REST e RESTful - Parte 2","user":{"login":"fabiohfab","id":17369918,"node_id":"MDQ6VXNlcjE3MzY5OTE4","avatar_url":"https://avatars.githubusercontent.com/u/17369918?v=4","gravatar_id":"","url":"https://api.github.com/users/fabiohfab","html_url":"https://github.com/fabiohfab","followers_url":"https://api.github.com/users/fabiohfab/followers","following_url":"https://api.github.com/users/fabiohfab/following{/other_user}","gists_url":"https://api.github.com/users/fabiohfab/gists{/gist_id}","starred_url":"https://api.github.com/users/fabiohfab/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fabiohfab/subscriptions","organizations_url":"https://api.github.com/users/fabiohfab/orgs","repos_url":"https://api.github.com/users/fabiohfab/repos","events_url":"https://api.github.com/users/fabiohfab/events{/privacy}","received_events_url":"https://api.github.com/users/fabiohfab/received_events","type":"User","site_admin":false},"labels":[{"id":2001541402,"node_id":"MDU6TGFiZWwyMDAxNTQxNDAy","url":"https://api.github.com/repos/minecode/minecode.github.io/labels/Api","name":"Api","color":"6750ba","default":false,"description":""},{"id":2001541476,"node_id":"MDU6TGFiZWwyMDAxNTQxNDc2","url":"https://api.github.com/repos/minecode/minecode.github.io/labels/Rest","name":"Rest","color":"d1b51b","default":false,"description":""},{"id":2001541586,"node_id":"MDU6TGFiZWwyMDAxNTQxNTg2","url":"https://api.github.com/repos/minecode/minecode.github.io/labels/Restful","name":"Restful","color":"aa2a46","default":false,"description":""},{"id":1923405712,"node_id":"MDU6TGFiZWwxOTIzNDA1NzEy","url":"https://api.github.com/repos/minecode/minecode.github.io/labels/post","name":"post","color":"2dc64e","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-04-20T22:20:02Z","updated_at":"2020-04-21T08:29:30Z","closed_at":"2020-04-20T22:50:50Z","author_association":"MEMBER","active_lock_reason":null,"body":"Na [primeira parte](https://minecode.github.io/blog/post/19) deste artigo foram abordadas as normas de uma API REST e foi feita uma abordagem aos métodos HTTP. É por isso recomendada a leitura para os leitores que não estejam familiarizados com estes tópicos.\r\n\r\nQuando um utilizador da API solicita alguns recursos específicos, por exemplo, recursos que tenham de ser filtrados por localização geográfica, não faz sentido enviar na resposta da solicitação todos os recursos, deixando a cargo do cliente a filtração dos mesmos. \r\n\r\n![](https://hlassets.paessler.com/common/files/graphics/monitoring-topics/api-monitoring.png)\r\n\r\nNesta abordagem enviar-se-ia um grande conjunto de dados em que muitos deles não seriam úteis para o cliente. Por exemplo, ao fazer a seguinte requisição, a API irá retornar todos os restaurantes que tem em base de dados. Caso o utilizador apenas necessite dos restaurantes localizados em Aveiro, terá de ser ele a filtrar os resultados.\r\n\r\n```http\r\nREQUEST:\r\nGET /restaurant/\r\n\r\nRESPONSE:\r\n[\r\n    {\"id\": 1, \"name\": \"asd\", \"location\": \"Porto\"},\r\n    {\"id\": 2, \"name\": \"aaa\", \"location\": \"Lisboa\"},\r\n    {\"id\": 3, \"name\": \"ccc\", \"location\": \"Lisboa\"},\r\n    {\"id\": 4, \"name\": \"bbb\", \"location\": \"Coimbra\"},\r\n    ...,\r\n    {\"id\": 100, \"name\": \"abc\", \"location\": \"Aveiro\"},\r\n    {\"id\": 101, \"name\": \"123\", \"location\": \"Faro\"},\r\n    ...\r\n]\r\n```\r\n\r\nAo implementar a filtração do lado da API, a requisição poderá ser feita da seguinte forma:\r\n\r\n```http\r\nREQUEST:\r\nGET /restaurant/?location=Aveiro\r\n\r\nRESPONSE:\r\n[\r\n    {\"id\": 35, \"name\": \"xyz\", \"location\": \"Aveiro\"},\r\n    {\"id\": 100, \"name\": \"abc\", \"location\": \"Aveiro\"}\r\n]\r\n```\r\n\r\nAssim sendo, será mais aconselhável fazer a filtração de resultados do lado da API e posteriormente enviar esses resultados para o cliente. A ordenação pode também ser bastante útil, caso o utilizador da API necessite saber, por exemplo, os menus mais baratos de um restaurante. \r\n\r\n```http\r\nREQUEST:\r\nGET /restaurant/2/?sort=-price\r\n\r\nRESPONSE:\r\n[\r\n    {\"id\": 20, \"restaurant\": 2, \"name\": \"beef\", \"price\": \"50\"},\r\n    {\"id\": 21, \"restaurant\": 2, \"name\": \"fish\", \"price\": \"45\"},\r\n    {\"id\": 22, \"restaurant\": 2, \"name\": \"vegetarian\", \"price\": \"30\"}\r\n]\r\n```\r\n\r\nMesmo filtrando os resultados e ordenando-os consoante as necessidades do utilizador, a requisição poderá enviar muitos recursos na sua resposta, o que poderá causar alguns problemas de interpretação dos resultados por parte do utilizador. A melhor solução a este problema será a paginação, ou seja, enviar os resultados em conjuntos de x elementos. \r\n\r\n```http\r\nREQUEST:\r\nGET /restaurant/?page=2\r\n\r\nRESPONSE:\r\n[\r\n    {\"id\": 5, \"name\": \"asd\", \"location\": \"Porto\"},\r\n    {\"id\": 6, \"name\": \"aaa\", \"location\": \"Lisboa\"},\r\n    {\"id\": 7, \"name\": \"ccc\", \"location\": \"Lisboa\"},\r\n    {\"id\": 8, \"name\": \"bbb\", \"location\": \"Coimbra\"}\r\n]\r\n```\r\n\r\nNo exemplo em cima apenas são retornados 4 restaurantes registados na aplicação, embora existam mais.\r\n\r\n![](https://wp.lob.com/wp-content/uploads/2014/10/API-design.jpg)\r\n\r\nPara que uma API seja bem definida, é necessário que o seu utilizador saiba o que pode ou não fazer. O HATEOAS, _Hypermedia as the Engine of Application State_, permite \"documentar\" a API através de links que redirecionam o cliente para as possíveis ações que o utilizador pode fazer em cada recurso. Por exemplo, no caso anterior da paginação, seria útil enviar na resposta da solicitação os links para a próxima página e para a anterior. Outras informações deverão ser adicionadas à resposta, tais como, o número de recursos enviados na mesma, o número total de páginas e a página atual. No caso da resposta ser uma lista de recursos, poderão ser adicionados links para o acesso direto a cada recurso, para o editar, apagar, etc.. Desta forma, em cada solicitação, a resposta daria ao cliente as possíveis ações para cada recurso.\r\n\r\n![](https://www.w3schools.in/wp-content/uploads/2019/08/http-protocol.jpg)\r\n\r\nNote-se que é importante que as respostas das solicitações sejam simples, fáceis de entender mas que ao mesmo tempo tenham toda a informação necessária e útil. Por isso mesmo é muito importante a escolha do tipo de média. Um dos problemas do JSON é que não suporta hypermedia, ou seja, não segue totalmente uma ideologia RESTful. No caso de se usar JSON, a melhor solução será enviar a informação solicitada dentro de uma key _results_ e os links para outros recursos e ações em metadata fora dos _results_. Ainda assim será necessário incorporar alguns links em cada recurso, o que não é o ideal pois irá misturar links com dados de recursos.\r\n\r\nPosto isto, a requisição que vimos anteriormente ficaria da seguinte forma:\r\n\r\n```http\r\nREQUEST:\r\nGET /restaurant/?page=2\r\n\r\nRESPONSE:\r\n{\r\n    \"page_number\": 2,\r\n    \"total_pages\": 102,\r\n    \"total_count\": 1013,\r\n    \"previous_page\": \"/stations/?page=1\",\r\n    \"next_page\": \"/stations/?page=3\",\r\n    \"last_page\": \"/stations/?page=102\",\r\n    \"results\": [\r\n        {\"self\": \"/restaurant/5/\", \"id\": 5, \"name\": \"asd\", \"location\": \"Porto\"},\r\n        {\"self\": \"/restaurant/6/\", \"id\": 6, \"name\": \"aaa\", \"location\": \"Lisboa\"},\r\n        {\"self\": \"/restaurant/7/\", \"id\": 7, \"name\": \"ccc\", \"location\": \"Lisboa\"},\r\n        {\"self\": \"/restaurant/8/\", \"id\": 8, \"name\": \"bbb\", \"location\": \"Coimbra\"}\r\n    ]\r\n}\r\n```\r\n\r\nA alternativa mais RESTful ao JSON será usar tipos de média com suporte direto ao _Hypermedia_, tais como o API JSON. Ao utilizar esta alternativa, iremos perder alguma da simplicidade de leitura e escrita das respostas das solicitações, pelo que terá de ser feita uma escolha que melhor se adeque ao que é pretendido.\r\n\r\nNa [terceira e última parte](https://minecode.github.io/blog/post/22) deste artigo iremos abordar a segurança da nossa API.","closed_by":{"login":"fabiohfab","id":17369918,"node_id":"MDQ6VXNlcjE3MzY5OTE4","avatar_url":"https://avatars.githubusercontent.com/u/17369918?v=4","gravatar_id":"","url":"https://api.github.com/users/fabiohfab","html_url":"https://github.com/fabiohfab","followers_url":"https://api.github.com/users/fabiohfab/followers","following_url":"https://api.github.com/users/fabiohfab/following{/other_user}","gists_url":"https://api.github.com/users/fabiohfab/gists{/gist_id}","starred_url":"https://api.github.com/users/fabiohfab/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fabiohfab/subscriptions","organizations_url":"https://api.github.com/users/fabiohfab/orgs","repos_url":"https://api.github.com/users/fabiohfab/repos","events_url":"https://api.github.com/users/fabiohfab/events{/privacy}","received_events_url":"https://api.github.com/users/fabiohfab/received_events","type":"User","site_admin":false},"performed_via_github_app":null},"relatedPosts":[]},"__N_SSG":true}