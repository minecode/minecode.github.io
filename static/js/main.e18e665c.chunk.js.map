{"version":3,"sources":["firebase/firebase.js","firebase/auth.js","initialButtonList.js","containers/Layout.js","components/SocialButtonList.js","components/Home.js","components/Contest.js","containers/App.js","containers/withAuthentication.js","registerServiceWorker.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","getAuth","auth","githubOAuth","firebase_","GithubAuthProvider","twitterOAuth","TwitterAuthProvider","facebookOAuth","FacebookAuthProvider","github","visible","provider","addScope","Layout","children","contentCenter","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","currentUser","onClick","signOut","defaultProps","SocialButtonList","history","buttonList","currentProviders","authHandler","authData","push","user","providerData","console","error","Object","keys","map","provder","key","e","providerOAuth","linkWithPopup","then","catch","err","signInWithPopup","authenticate","withRouter","Home","titleCase","str","splitStr","split","join","toLowerCase","i","length","charAt","toUpperCase","substring","listOfChallenges","challenges","component","document","getElementById","forEach","challenge","name","includes","challengeComponent","createElement","setAttribute","h2","a","nameOfChallenge","createTextNode","append","p","number","onAuthStateChanged","props","this","fetchData","authorizationBasic","window","btoa","REACT_APP_APIKEY","header","Headers","set","fetch","method","headers","res","json","data","Component","Contest","match","params","ReactDOM","render","source","atob","content","App","basename","path","exact","WrappedComponent","state","setState","info","wait","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","URL","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e18e665c.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\n// import 'firebase/database';\n\n/**\n * Creates and initializes a Firebase app.\n */\nconst app = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN\n  // databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL\n});\n\nexport default app;\n","import firebase from './firebase';\n\n/**\n * Returns the Firebase Auth service\n */\nexport const getAuth = () => {\n  return firebase.auth();\n};\n\n/**\n * Returns a new instance of GitHub auth provider.\n */\nexport const githubOAuth = () => {\n  return new firebase.firebase_.auth.GithubAuthProvider();\n};\n\n/**\n * Returns a new instance of Twitter auth provider.\n */\nexport const twitterOAuth = () => {\n  return new firebase.firebase_.auth.TwitterAuthProvider();\n};\n\n/**\n * Returns a new instance of Facebook auth provider.\n */\nexport const facebookOAuth = () => {\n  return new firebase.firebase_.auth.FacebookAuthProvider();\n};\n","import { auth } from './firebase';\n\n/**\n * Initial state of the Social Buttons\n */\nexport default {\n  github: {\n    visible: true,\n    provider: () => {\n      const provider = auth.githubOAuth();\n      provider.addScope('user');\n      return provider;\n    }\n  },\n  // twitter: {\n  //   visible: true,\n  //   provider: () => auth.twitterOAuth()\n  // },\n  // facebook: {\n  //   visible: true,\n  //   provider: () => auth.facebookOAuth()\n  // }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { auth } from '../firebase';\n\nimport './Layout.css';\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n  contentCenter: PropTypes.bool\n};\n\nconst defaultProps = {\n  contentCenter: false\n};\n\nconst Layout = ({ children, contentCenter }) => {\n\n  return (\n    <div className=\"container\">\n      <nav className=\"navbar navbar-expand-lg navbar-dark\">\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo01\" aria-controls=\"navbarTogglerDemo01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\n          <a className=\"navbar-brand navbar-nav mr-auto mt-2 mt-lg-0\" href=\"/\">Code Contest</a>\n          <form className=\"form-inline my-2 my-lg-0\">\n          { auth.getAuth().currentUser !== null ?\n            <button\n                className=\"btn__logout\"\n                onClick={() => auth.getAuth().signOut()}>\n                Logout\n            </button> \n            : \n            null\n          }\n          </form>\n        </div>\n      </nav>\n      \n      <main className={contentCenter ? 'content-center' : ''}>{children}</main>\n    </div>\n  );\n};\n\nLayout.propTypes = propTypes;\nLayout.defaultProps = defaultProps;\n\nexport default Layout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n\nimport './SocialButtonList.css';\n\nconst propTypes = {\n  buttonList: PropTypes.shape({\n    github: PropTypes.shape({\n      visible: PropTypes.bool.isRequired,\n      provider: PropTypes.func.isRequired\n    }),\n    twitter: PropTypes.shape({\n      visible: PropTypes.bool.isRequired,\n      provider: PropTypes.func.isRequired\n    }),\n    facebook: PropTypes.shape({\n      visible: PropTypes.bool.isRequired,\n      provider: PropTypes.func.isRequired\n    })\n  }).isRequired,\n  auth: PropTypes.func.isRequired,\n  currentProviders: PropTypes.func\n};\n\nconst defaultProps = {\n  currentProviders: null\n};\n\nconst SocialButtonList = ({ history, buttonList, auth, currentProviders }) => {\n  /**\n   * Handles successfull authentication.\n   * 'currentProviders' is null when the user is in Login page\n   */\n  const authHandler = authData => {\n    if (authData) {\n      if (currentProviders === null) {\n        history.push('/');\n      } else {\n        currentProviders(authData.user.providerData);\n      }\n    } else {\n      console.error('Error authenticating');\n    }\n  };\n\n  /**\n   * Authenticates the user with a social media provider.\n   * Either creates a new user account in Firebase or links\n   * a different provider to the same user account\n   */\n  const authenticate = (e, provider) => {\n    const providerOAuth = buttonList[provider].provider();\n\n    if (!auth().currentUser) {\n      auth()\n        .signInWithPopup(providerOAuth)\n        .then(authHandler)\n        .catch(err => console.error(err));\n    } else {\n      auth()\n        .currentUser.linkWithPopup(providerOAuth)\n        .then(authHandler)\n        .catch(err => console.error(err));\n    }\n  };\n\n  const renderButtonList = provder => {\n    const visible = buttonList[provder].visible;\n\n    return (\n      <button\n        key={provder}\n        className={`btn__social btn--${provder} ${!visible && 'hidden'}`}\n        onClick={e => authenticate(e, provder)}\n      >\n        {provder}\n      </button>\n    );\n  };\n\n  return (\n    <div className=\"btn__social--list\">\n      {Object.keys(buttonList).map(renderButtonList)}\n    </div>\n  );\n};\n\nSocialButtonList.propTypes = propTypes;\nSocialButtonList.defaultProps = defaultProps;\n\nexport default withRouter(SocialButtonList);\n","import React, { Component } from 'react';\n\nimport buttonList from '../initialButtonList';\nimport Layout from '../containers/Layout';\nimport SocialButtonList from './SocialButtonList';\nimport { auth } from '../firebase';\n\nclass Home extends Component {\n  /**\n   * Send the user to 'Dashboard' if is authenticated\n   */\n  componentDidMount() {\n    auth.getAuth().onAuthStateChanged(user => {\n      if (user) {\n        this.props.history.push('/');\n      }\n    });\n    this.fetchData()\n  }\n\n  titleCase = (str) => {\n    str = str.split('-').join(' ')\n    var splitStr = str.toLowerCase().split(' ');\n    for (var i = 0; i < splitStr.length; i++) {\n      // You do not need to check if i is larger than splitStr length, as your for does that for you\n      // Assign it back to the array\n      splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    }\n    // Directly return the joined string\n    return splitStr.join(' ');\n  }\n\n  listOfChallenges = (challenges) => {\n    var component = document.getElementById('listOfChallenges')\n    challenges.forEach(challenge => {\n      if (challenge.name.includes('challenge-', 0)) {\n        var challengeComponent = document.createElement('challenge')\n        challengeComponent.setAttribute('style', 'border-color: rgb(78,121,167)')\n        challengeComponent.setAttribute('class', 'svelte-m9wvyg')\n\n        var h2 = document.createElement('h2')\n        h2.setAttribute('class', 'svelte-m9wvyg')\n        var a = document.createElement('a')\n        a.setAttribute('href', 'contest/' + challenge.name.split('-')[1])\n        a.setAttribute('style', 'text-decoration:none; color:white')\n        var nameOfChallenge = document.createTextNode(this.titleCase(challenge.name))\n        a.append(nameOfChallenge)\n        h2.append(a)\n        challengeComponent.append(h2)\n\n        var p = document.createElement('p')\n        p.setAttribute('class', 'svelte-m9wvyg')\n        var number = document.createTextNode('0')\n        p.append(number)\n        challengeComponent.append(p)\n\n        component.append(challengeComponent)\n      }\n    })\n  }\n\n  fetchData() {\n    const authorizationBasic = window.btoa(process.env.REACT_APP_APIKEY);\n    const header = new Headers();\n    header.set('Authorization', 'Basic ' + authorizationBasic)\n    fetch('https://api.github.com/repos/minecode/code_contest/branches', {\n        method: 'GET',\n        headers: header\n      })\n      .then(res => res.json())\n      .then(data => {\n        this.listOfChallenges(data)\n      })\n  }\n\n  render() {\n    return (\n      <Layout contentCenter={true}>\n        { auth.getAuth().currentUser === null ?\n          <SocialButtonList buttonList={buttonList} auth={auth.getAuth} />\n          :\n          null\n        }\n        <div className=\"container text-center\">\n          <h2 className=\"p-5 m-5 b-5 text-center\">Challenges</h2>\n          <main\n            className=\"row svelte-m9wvyg p-5 m-5 b-5\"\n            id=\"listOfChallenges\"></main>\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport Layout from '../containers/Layout';\nimport './Contest.css';\nimport ReactDOM from \"react-dom\";\nimport ReactMarkdown from \"react-markdown\";\nclass Contest extends Component {\n\n  componentDidMount() {\n    this.fetchData()\n  }\n\n  fetchData() {\n    const authorizationBasic = window.btoa(process.env.REACT_APP_APIKEY);\n    const header = new Headers();\n    header.set('Authorization', 'Basic ' + authorizationBasic)\n    fetch('https://api.github.com/repos/minecode/code_contest/contents/challenge.md?ref=challenge-' + this.props.match.params.id, {\n        method: 'GET',\n        headers: header\n      })\n      .then(res => res.json())\n      .then(data => {\n        document.getElementById('contestTitle').append('Challenge ' + this.props.match.params.id)\n        ReactDOM.render(<ReactMarkdown source={atob(data.content)}/>, document.getElementById('contestContent'))\n      })\n  }\n\n  render() {\n    return (\n      <Layout>\n        <div className=\"container mt-5 mb-5\" id=\"contest\">\n          <h2 className=\"row\" id=\"contestTitle\">\n          </h2>\n          <div className=\"row\" id=\"contestContent\">\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Contest;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Home from '../components/Home';\nimport Contest from '../components/Contest';\nimport withAuthentication from '../containers/withAuthentication';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Router basename=\"code_contest\">\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/contest/:id\" component={withAuthentication(Contest)} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport Delay from 'react-delay';\n\nimport { auth } from '../firebase';\n\n/**\n * HOC that verifies user is authenticated before returning the\n * protected component\n */\nexport default WrappedComponent => {\n  class WithAuthentication extends Component {\n    state = {\n      providerData: []\n    };\n\n    componentDidMount() {\n      auth.getAuth().onAuthStateChanged(user => {\n        if (user) {\n          this.setState({ providerData: user.providerData });\n        } else {\n          console.info('Must be authenticated');\n          this.props.history.push('/');\n        }\n      });\n    }\n\n    render() {\n      return this.state.providerData.length > 0 ? (\n        <WrappedComponent\n          {...this.props}\n          providerData={this.state.providerData}\n        />\n      ) : (\n        <Delay wait={250}>\n          <p>Loading...</p>\n        </Delay>\n      );\n    }\n  }\n\n  return WithAuthentication;\n};\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}